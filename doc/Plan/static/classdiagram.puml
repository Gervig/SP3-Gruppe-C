@startuml
'https://plantuml.com/class-diagram

class Main{
+ static void main(String[] args)
}

class Stream{
- String name
'utilities
- ArrayList<User> users
- currentUser
- TextUI ui
- FileIO io
- ArrayList<String> listOfActions;
- String seriesDataPath
- String filmDataPath
'constructor
+ Stream(String name)
'methods
- void setup()
' setup er til er at læse data
+ runStartMenu()
+ void createUser()
' skal createUser være void? Det er den i matador
' createUser skal vel checke om der er andre med det brugernavn
+ loginUser()
' skal loginUser være void?
' den skal vel checke om der er en user med det username
+ runDialog()
' i runDialog kan man vælge at søge
- void quitProgram()
}


class User{
-String name
- int id
-ArrayList<Profile> profile
+ chooseProfile()
+ createProfile()
' skal den checke om den user har en profil med det brugernavn?
}

class Profile{
- String name
- ArrayList<Series> seenSeries
- ArrayList<Film> seenFilm
- ArrayList<Video> savedVideo
+ boolean watchVideo()
+ boolean addToSaved()
'bør disse være under IVideo eller video i stedet?

}
class FileIO{
+ ArrayList<String> readFilmData(String path)
+ ArrayList<String> readSeriesData(String path)
+ void saveData(ArrayList<User> users, String path)
+ String[] readFilmData(String path, int length)
+ String[] readSeriesData(String path, int length)
+ ArrayList<User> readSaveData(String path, int length)
}

class TextUI{
- Scanner scanner
+ void displayList()
+ void displayMsg(String s)
+ int promptNumeric(String msg)
+ String promptText(String msg)
+ int promptChoice(String msg, ArrayList<String> list)
}

interface IVideo {
int getReleaseDate()
String getName()
String getGenre()
float getRating()
}

abstract Class Video{
- String name
- String genre
- float rating
- boolean hasSeen
- ArrayList<int> releaseDate
'constructor
+ Video(name, genre, rating)
}

class Series{
- ArrayList<String [3]> seenEpisodes
- int seasons
- int episodes
- ArrayList<int> releaseDate
'constructor - hvis serien ikke er slut
+ Series (releaseDate.get(0), seasons, episodes)
'constructor - hvis serien er afsluttet
+ Series (releaseDate.get(0), releaseDate.get(1), seasons, episodes)
}

class Film {
- ArrayList<int> releaseDate
'constructor
+ Film (releaseDate)
}


class Search{
+ ArrayList<Video> search()
'methods til de forskellige søgemuligheder
' Skal disse returnere objekterne fra video?
+ searchGenre()
+ searchName()
+ searchRating()
+ searchReleasedate()
'skal vi have funktioner der kun søger blandt serier og film adskilt?
}

IVideo *-- Video

Video <|-- Series
Video <|-- Film

User *-- Profile

Main *-- Stream

Stream *-- User
Stream *-- FileIO
Stream *-- TextUI
Stream *-- IVideo
Stream *-- Search

@enduml